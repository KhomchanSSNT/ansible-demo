---
- name: Check RHEL Errata (CVE) Updates
  hosts: all
  gather_facts: yes
  become: yes

  tasks:
    - name: Clean dnf metadata cache
      ansible.builtin.command: dnf clean metadata
      changed_when: false

    - name: Run dnf check-update --security
      ansible.builtin.command: dnf check-update --security
      register: cve_updates
      changed_when: false
      failed_when: false

    - name: Extract and simplify CVE update information
      ansible.builtin.set_fact:
        cve_summary: |
          {% set security_updates = [] %}
          {% for line in cve_updates.stdout_lines %}
            {# Skip empty lines, informational lines, and "Last metadata expiration check" lines #}
            {% if line | length > 0 and not 'Last metadata expiration check' in line and not 'Not root' in line %}
              {# Assuming any remaining line from 'dnf check-update --security' is a security update #}
              {% set parts = line.split() %}
              {% if parts | length >= 3 %} {# Ensure there are enough parts to parse #}
                {% set package_name = parts[0] %}
                {% set version_release = parts[1] %}
                {% set repo = parts[2] %}
                {% set _ = security_updates.append(package_name + ' ' + version_release + ' (' + repo + ')') %}
              {% endif %}
            {% endif %}
          {% endfor %}
          {% if security_updates | length > 0 %}
            Hostname: {{ ansible_hostname }}
            Security Updates Available: {{ security_updates | length }}
            {% for item in security_updates %}
            - {{ item }}
            {% endfor %}
          {% else %}
            Hostname: {{ ansible_hostname }}
            No security updates available.
          {% endif %}

    - name: Print simplified CVE update summary to console
      ansible.builtin.debug:
        msg: "{{ cve_summary }}"

    - name: Get current date and time for filename
      ansible.builtin.set_fact:
        current_date: "{{ now(utc=False, fmt='%d%m%Y') }}"
        current_timestamp: "{{ now(utc=False, fmt='%H%M%S') }}"

    - name: Define output file path
      ansible.builtin.set_fact:
        output_file_path: "/tmp/{{ current_date }}-cve.txt"
        backup_output_file_path: "/tmp/{{ current_date }}-cve-{{ current_timestamp }}.txt"

    - name: Check if the daily file already exists
      ansible.builtin.stat:
        path: "{{ output_file_path }}"
      register: output_file_stat

    - name: Write CVE update summary to file
      ansible.builtin.copy:
        content: "{{ cve_summary }}"
        dest: "{{ output_file_path }}"
      when: not output_file_stat.stat.exists

    - name: Write CVE update summary to a time-stamped file if primary exists
      ansible.builtin.copy:
        content: "{{ cve_summary }}"
        dest: "{{ backup_output_file_path }}"
      when: output_file_stat.stat.exists