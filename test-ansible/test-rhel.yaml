---
- name: Check and update selected packages from user input
  hosts: all
  become: true
  vars:
    package_input: ""   # Passed via AWX survey (free text)

  tasks:
    - name: Convert package_input (string) to list
      ansible.builtin.set_fact:
        target_packages: "{{ package_input.split() }}"

    - name: Clean yum metadata cache
      ansible.builtin.command: yum clean metadata
      changed_when: false

    - name: Run yum check-update
      ansible.builtin.command: yum check-update
      register: yum_updates
      changed_when: false
      failed_when: false

    - name: Print raw check-update output
      ansible.builtin.debug:
        msg: "{{ yum_updates.stdout_lines }}"
      when: yum_updates.stdout_lines | length > 0

    - name: Extract full package names from check-update output
      ansible.builtin.set_fact:
        available_updates: >-
          {{ yum_updates.stdout_lines
             | select('match', '^[a-zA-Z0-9_.+-]+\\s+[0-9:.a-zA-Z~_-]+\\s+[a-zA-Z0-9._-]+$')
             | map('regex_search', '^([a-zA-Z0-9_.+-]+)')
             | list }}

    - name: Normalize package names for comparison
      ansible.builtin.set_fact:
        normalized_updates: "{{ available_updates | map('regex_replace', '\\..*$', '') | list }}"

    - name: Filter user input against normalized update list
      ansible.builtin.set_fact:
        valid_updates: "{{ target_packages | select('in', normalized_updates) | list }}"

    - name: Map full package names based on valid user input
      ansible.builtin.set_fact:
        full_valid_updates: >-
          {{ available_updates
             | select('regex_search', '^(%s)\\.' % ('|'.join(valid_updates)))
             | list }}

    - name: Print valid packages to be updated
      ansible.builtin.debug:
        msg: >-
          ===== Valid Packages to Update =====
          {% for package in full_valid_updates %}
          {% for line in yum_updates.stdout_lines %}
          {% if line.startswith(package + ' ') %}
          {{ line }}
          {% endif %}
          {% endfor %}
          {% endfor %}
          {% if not full_valid_updates %}
          None of the specified packages are updatable.
          {% endif %}

    - name: Update selected valid packages
      ansible.builtin.yum:
        name: "{{ item }}"
        state: latest
      loop: "{{ full_valid_updates }}"
      when: full_valid_updates | length > 0
